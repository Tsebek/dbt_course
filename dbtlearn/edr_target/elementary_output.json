{"creation_time": "2024-03-08T22:05:45+00:00", "days_back": 7, "models": {"model.dbtlearn.dim_listings_w_hosts": {"name": "dim_listings_w_hosts", "unique_id": "model.dbtlearn.dim_listings_w_hosts", "owners": [], "tags": [], "package_name": "dbtlearn", "description": "", "full_path": "models/dim/dim_listings_w_hosts.sql", "meta": {}, "materialization": "table", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_listings_w_hosts", "patch_path": "dbtlearn://models/schema.yml", "model_name": "dim_listings_w_hosts", "normalized_full_path": "dbtlearn/models/dim/dim_listings_w_hosts.sql", "fqn": "airbnb.dev.dim_listings_w_hosts", "artifact_type": "model"}, "model.dbtlearn.dim_listings_cleansed": {"name": "dim_listings_cleansed", "unique_id": "model.dbtlearn.dim_listings_cleansed", "owners": [], "tags": [], "package_name": "dbtlearn", "description": "Cleansed table which contains Airbnb listings.", "full_path": "models/dim/dim_listings_cleansed.sql", "meta": {}, "materialization": "view", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_listings_cleansed", "patch_path": "dbtlearn://models/schema.yml", "model_name": "dim_listings_cleansed", "normalized_full_path": "dbtlearn/models/dim/dim_listings_cleansed.sql", "fqn": "airbnb.dev.dim_listings_cleansed", "artifact_type": "model"}, "model.dbtlearn.dim_hosts_cleansed": {"name": "dim_hosts_cleansed", "unique_id": "model.dbtlearn.dim_hosts_cleansed", "owners": [], "tags": [], "package_name": "dbtlearn", "description": "Cleansed table for the Airbnb hosts", "full_path": "models/dim/dim_hosts_cleansed.sql", "meta": {}, "materialization": "view", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_hosts_cleansed", "patch_path": "dbtlearn://models/schema.yml", "model_name": "dim_hosts_cleansed", "normalized_full_path": "dbtlearn/models/dim/dim_hosts_cleansed.sql", "fqn": "airbnb.dev.dim_hosts_cleansed", "artifact_type": "model"}, "model.dbtlearn.fct_reviews": {"name": "fct_reviews", "unique_id": "model.dbtlearn.fct_reviews", "owners": [], "tags": [], "package_name": "dbtlearn", "description": "", "full_path": "models/fct/fct_reviews.sql", "meta": {}, "materialization": "incremental", "database_name": "airbnb", "schema_name": "dev", "table_name": "fct_reviews", "patch_path": "dbtlearn://models/schema.yml", "model_name": "fct_reviews", "normalized_full_path": "dbtlearn/models/fct/fct_reviews.sql", "fqn": "airbnb.dev.fct_reviews", "artifact_type": "model"}, "model.dbtlearn.mart_fullmoon_reviews": {"name": "mart_fullmoon_reviews", "unique_id": "model.dbtlearn.mart_fullmoon_reviews", "owners": [], "tags": [], "package_name": "dbtlearn", "description": "", "full_path": "models/mart/mart_fullmoon_reviews.sql", "meta": {}, "materialization": "table", "database_name": "airbnb", "schema_name": "dev", "table_name": "mart_fullmoon_reviews", "patch_path": null, "model_name": "mart_fullmoon_reviews", "normalized_full_path": "dbtlearn/models/mart/mart_fullmoon_reviews.sql", "fqn": "airbnb.dev.mart_fullmoon_reviews", "artifact_type": "model"}, "model.dbtlearn.src_reviews": {"name": "src_reviews", "unique_id": "model.dbtlearn.src_reviews", "owners": [], "tags": [], "package_name": "dbtlearn", "description": "", "full_path": "models/src/src_reviews.sql", "meta": {}, "materialization": "ephemeral", "database_name": "airbnb", "schema_name": "dev", "table_name": "src_reviews", "patch_path": null, "model_name": "src_reviews", "normalized_full_path": "dbtlearn/models/src/src_reviews.sql", "fqn": "airbnb.dev.src_reviews", "artifact_type": "model"}, "model.dbtlearn.src_hosts_copy": {"name": "src_hosts_copy", "unique_id": "model.dbtlearn.src_hosts_copy", "owners": [], "tags": [], "package_name": "dbtlearn", "description": "", "full_path": "models/src/src_hosts_copy.sql", "meta": {}, "materialization": "ephemeral", "database_name": "airbnb", "schema_name": "dev", "table_name": "src_hosts_copy", "patch_path": null, "model_name": "src_hosts_copy", "normalized_full_path": "dbtlearn/models/src/src_hosts_copy.sql", "fqn": "airbnb.dev.src_hosts_copy", "artifact_type": "model"}, "model.dbtlearn.src_listings": {"name": "src_listings", "unique_id": "model.dbtlearn.src_listings", "owners": [], "tags": [], "package_name": "dbtlearn", "description": "", "full_path": "models/src/src_listings.sql", "meta": {}, "materialization": "ephemeral", "database_name": "airbnb", "schema_name": "dev", "table_name": "src_listings", "patch_path": null, "model_name": "src_listings", "normalized_full_path": "dbtlearn/models/src/src_listings.sql", "fqn": "airbnb.dev.src_listings", "artifact_type": "model"}, "model.dbtlearn.src_hosts": {"name": "src_hosts", "unique_id": "model.dbtlearn.src_hosts", "owners": [], "tags": [], "package_name": "dbtlearn", "description": "", "full_path": "models/src/src_hosts.sql", "meta": {}, "materialization": "ephemeral", "database_name": "airbnb", "schema_name": "dev", "table_name": "src_hosts", "patch_path": null, "model_name": "src_hosts", "normalized_full_path": "dbtlearn/models/src/src_hosts.sql", "fqn": "airbnb.dev.src_hosts", "artifact_type": "model"}, "source.dbtlearn.airbnb.listings": {"name": "listings", "unique_id": "source.dbtlearn.airbnb.listings", "owners": [], "tags": [], "package_name": "dbtlearn", "description": "", "full_path": "models/sources.yml", "meta": {}, "materialization": null, "source_name": "airbnb", "database_name": "airbnb", "schema_name": "raw", "table_name": "raw_listings", "model_name": "listings", "normalized_full_path": "dbtlearn/sources/sources.yml", "fqn": "airbnb.raw.raw_listings", "artifact_type": "source"}, "source.dbtlearn.airbnb.hosts": {"name": "hosts", "unique_id": "source.dbtlearn.airbnb.hosts", "owners": [], "tags": [], "package_name": "dbtlearn", "description": "", "full_path": "models/sources.yml", "meta": {}, "materialization": null, "source_name": "airbnb", "database_name": "airbnb", "schema_name": "raw", "table_name": "raw_hosts", "model_name": "hosts", "normalized_full_path": "dbtlearn/sources/sources.yml", "fqn": "airbnb.raw.raw_hosts", "artifact_type": "source"}, "source.dbtlearn.airbnb.reviews": {"name": "reviews", "unique_id": "source.dbtlearn.airbnb.reviews", "owners": [], "tags": [], "package_name": "dbtlearn", "description": "", "full_path": "models/sources.yml", "meta": {}, "materialization": null, "source_name": "airbnb", "database_name": "airbnb", "schema_name": "raw", "table_name": "raw_reviews", "model_name": "reviews", "normalized_full_path": "dbtlearn/sources/sources.yml", "fqn": "airbnb.raw.raw_reviews", "artifact_type": "source"}, "exposure.dbtlearn.Executive Dashboard": {"name": "Executive Dashboard", "unique_id": "exposure.dbtlearn.Executive Dashboard", "owners": ["Tsebek Badmaev"], "tags": [], "package_name": "dbtlearn", "description": "Executive Dashboard about Airbnb listings and hosts", "full_path": "models/dashboard.yml", "meta": {}, "materialization": null, "label": null, "url": "https://62c26a86.us2a.app.preset.io/superset/dashboard/8/?native_filters_key=Lip8GSMXBAIn9bBReNDH3V2GlubOTpKPu1GuGOmm-4AcpiIglWXNP_COXTzOlk9c", "type": "dashboard", "maturity": "low", "depends_on": null, "owner": null, "raw_queries": null, "model_name": "Executive Dashboard", "normalized_full_path": "dbtlearn/Executive Dashboard", "fqn": "Executive Dashboard", "artifact_type": "exposure"}}, "groups": {"dbt": {"dbtlearn": {"models": {"dim": {"__files__": [{"node_id": "model.dbtlearn.dim_listings_w_hosts", "resource_type": "model"}, {"node_id": "model.dbtlearn.dim_listings_cleansed", "resource_type": "model"}, {"node_id": "model.dbtlearn.dim_hosts_cleansed", "resource_type": "model"}]}, "fct": {"__files__": [{"node_id": "model.dbtlearn.fct_reviews", "resource_type": "model"}]}, "mart": {"__files__": [{"node_id": "model.dbtlearn.mart_fullmoon_reviews", "resource_type": "model"}]}, "src": {"__files__": [{"node_id": "model.dbtlearn.src_reviews", "resource_type": "model"}, {"node_id": "model.dbtlearn.src_hosts_copy", "resource_type": "model"}, {"node_id": "model.dbtlearn.src_listings", "resource_type": "model"}, {"node_id": "model.dbtlearn.src_hosts", "resource_type": "model"}]}}, "sources": {"__files__": [{"node_id": "source.dbtlearn.airbnb.listings", "resource_type": "source"}, {"node_id": "source.dbtlearn.airbnb.hosts", "resource_type": "source"}, {"node_id": "source.dbtlearn.airbnb.reviews", "resource_type": "source"}]}, "__files__": [{"node_id": "exposure.dbtlearn.Executive Dashboard", "resource_type": "exposure"}]}}, "tags": {"No tags": [{"node_id": "model.dbtlearn.dim_listings_w_hosts", "resource_type": "model"}, {"node_id": "model.dbtlearn.dim_listings_cleansed", "resource_type": "model"}, {"node_id": "model.dbtlearn.dim_hosts_cleansed", "resource_type": "model"}, {"node_id": "model.dbtlearn.fct_reviews", "resource_type": "model"}, {"node_id": "model.dbtlearn.mart_fullmoon_reviews", "resource_type": "model"}, {"node_id": "model.dbtlearn.src_reviews", "resource_type": "model"}, {"node_id": "model.dbtlearn.src_hosts_copy", "resource_type": "model"}, {"node_id": "model.dbtlearn.src_listings", "resource_type": "model"}, {"node_id": "model.dbtlearn.src_hosts", "resource_type": "model"}, {"node_id": "source.dbtlearn.airbnb.listings", "resource_type": "source"}, {"node_id": "source.dbtlearn.airbnb.hosts", "resource_type": "source"}, {"node_id": "source.dbtlearn.airbnb.reviews", "resource_type": "source"}, {"node_id": "exposure.dbtlearn.Executive Dashboard", "resource_type": "exposure"}]}, "owners": {"No owners": [{"node_id": "model.dbtlearn.dim_listings_w_hosts", "resource_type": "model"}, {"node_id": "model.dbtlearn.dim_listings_cleansed", "resource_type": "model"}, {"node_id": "model.dbtlearn.dim_hosts_cleansed", "resource_type": "model"}, {"node_id": "model.dbtlearn.fct_reviews", "resource_type": "model"}, {"node_id": "model.dbtlearn.mart_fullmoon_reviews", "resource_type": "model"}, {"node_id": "model.dbtlearn.src_reviews", "resource_type": "model"}, {"node_id": "model.dbtlearn.src_hosts_copy", "resource_type": "model"}, {"node_id": "model.dbtlearn.src_listings", "resource_type": "model"}, {"node_id": "model.dbtlearn.src_hosts", "resource_type": "model"}, {"node_id": "source.dbtlearn.airbnb.listings", "resource_type": "source"}, {"node_id": "source.dbtlearn.airbnb.hosts", "resource_type": "source"}, {"node_id": "source.dbtlearn.airbnb.reviews", "resource_type": "source"}], "Tsebek Badmaev": [{"node_id": "exposure.dbtlearn.Executive Dashboard", "resource_type": "exposure"}]}}, "invocation": {"invocation_id": null, "detected_at": null, "command": null, "selected": null, "full_refresh": null, "job_url": null, "job_name": null, "job_id": null, "orchestrator": null}, "test_results": {"model.dbtlearn.dim_listings_w_hosts": [{"metadata": {"test_unique_id": "test.dbtlearn.dbt_expectations_expect_column_max_to_be_between_dim_listings_w_hosts_price__5000.5218138b75", "elementary_unique_id": "test.dbtlearn.dbt_expectations_expect_column_max_to_be_between_dim_listings_w_hosts_price__5000.5218138b75.price.expectation", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_listings_w_hosts", "column_name": "price", "test_name": "expect_column_max_to_be_between", "test_display_name": "Expect Column Max To Be Between", "latest_run_time": "2024-03-06T07:03:01-08:00", "latest_run_time_utc": "2024-03-06T15:03:01+00:00", "latest_run_status": "warn", "model_unique_id": "model.dbtlearn.dim_listings_w_hosts", "table_unique_id": "airbnb.dev.dim_listings_w_hosts", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and max(price) <= 5000\n)\n as expression\n\n\n    from airbnb.dev.dim_listings_w_hosts\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"max_value": 5000, "column_name": "price", "model": "{{ get_where_subquery(ref('dim_listings_w_hosts')) }}"}, "test_created_at": null, "description": "Expect the column max to be between a min and max value.", "result": {"result_description": "Got 1 result, configured to warn if != 0", "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and max(price) <= 5000\n)\n as expression\n\n\n    from airbnb.dev.dim_listings_w_hosts\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_max_to_be_between", "test_params": {"max_value": 5000, "column_name": "price", "model": "{{ get_where_subquery(ref('dim_listings_w_hosts')) }}"}}, "test_tags": []}, "test_results": {"display_name": "expect_column_max_to_be_between", "results_sample": [{"expression": false}], "error_message": "Got 1 result, configured to warn if != 0", "failed_rows_count": 1}}, {"metadata": {"test_unique_id": "test.dbtlearn.dbt_expectations_expect_column_quantile_values_to_be_between_dim_listings_w_hosts_price__500__50__0_99.71a0bfb970", "elementary_unique_id": "test.dbtlearn.dbt_expectations_expect_column_quantile_values_to_be_between_dim_listings_w_hosts_price__500__50__0_99.71a0bfb970.price.expectation", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_listings_w_hosts", "column_name": "price", "test_name": "expect_column_quantile_values_to_be_between", "test_display_name": "Expect Column Quantile Values To Be Between", "latest_run_time": "2024-03-06T07:03:03-08:00", "latest_run_time_utc": "2024-03-06T15:03:03+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_listings_w_hosts", "table_unique_id": "airbnb.dev.dim_listings_w_hosts", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and percentile_cont(0.99) within group (order by price) >= 50 and percentile_cont(0.99) within group (order by price) <= 500\n)\n as expression\n\n\n    from airbnb.dev.dim_listings_w_hosts\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"quantile": 0.99, "min_value": 50, "max_value": 500, "column_name": "price", "model": "{{ get_where_subquery(ref('dim_listings_w_hosts')) }}"}, "test_created_at": null, "description": "Expect specific provided column quantiles to be between provided min_value and max_value values.", "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and percentile_cont(0.99) within group (order by price) >= 50 and percentile_cont(0.99) within group (order by price) <= 500\n)\n as expression\n\n\n    from airbnb.dev.dim_listings_w_hosts\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_quantile_values_to_be_between", "test_params": {"quantile": 0.99, "min_value": 50, "max_value": 500, "column_name": "price", "model": "{{ get_where_subquery(ref('dim_listings_w_hosts')) }}"}}, "test_tags": []}, "test_results": {"display_name": "expect_column_quantile_values_to_be_between", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbtlearn.dbt_expectations_expect_column_values_to_be_of_type_dim_listings_w_hosts_price__number.6e17061c8a", "elementary_unique_id": "test.dbtlearn.dbt_expectations_expect_column_values_to_be_of_type_dim_listings_w_hosts_price__number.6e17061c8a.price.expectation", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_listings_w_hosts", "column_name": "price", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "latest_run_time": "2024-03-06T07:03:08-08:00", "latest_run_time_utc": "2024-03-06T15:03:08+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_listings_w_hosts", "table_unique_id": "airbnb.dev.dim_listings_w_hosts", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('LISTING_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LISTING_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ROOM_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINIMUM_NIGHTS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HOST_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HOST_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HOST_IS_SUPERHOST' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UPDATED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PRICE'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "number", "column_name": "price", "model": "{{ get_where_subquery(ref('dim_listings_w_hosts')) }}"}, "test_created_at": null, "description": "Expect a column to be of a specified data type.", "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('LISTING_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LISTING_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ROOM_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINIMUM_NIGHTS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HOST_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HOST_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HOST_IS_SUPERHOST' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UPDATED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PRICE'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "number", "column_name": "price", "model": "{{ get_where_subquery(ref('dim_listings_w_hosts')) }}"}}, "test_tags": []}, "test_results": {"display_name": "expect_column_values_to_be_of_type", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbtlearn.dbt_expectations_expect_table_row_count_to_equal_other_table_dim_listings_w_hosts_source_airbnb_listings_.637b6229da", "elementary_unique_id": "test.dbtlearn.dbt_expectations_expect_table_row_count_to_equal_other_table_dim_listings_w_hosts_source_airbnb_listings_.637b6229da.None.expectation", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_listings_w_hosts", "column_name": null, "test_name": "expect_table_row_count_to_equal_other_table", "test_display_name": "Expect Table Row Count To Equal Other Table", "latest_run_time": "2024-03-06T07:03:08-08:00", "latest_run_time_utc": "2024-03-06T15:03:08+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_listings_w_hosts", "table_unique_id": "airbnb.dev.dim_listings_w_hosts", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with a as (\n        \n    select\n        \n        count(*) as expression\n    from\n        airbnb.dev.dim_listings_w_hosts\n    \n\n    ),\n    b as (\n        \n    select\n        \n        count(*) * 1 as expression\n    from\n        airbnb.raw.raw_listings\n    \n\n    ),\n    final as (\n\n        select\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a cross join b\n        \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0", "test_params": {"compare_model": "source('airbnb', 'listings')", "model": "{{ get_where_subquery(ref('dim_listings_w_hosts')) }}"}, "test_created_at": null, "description": "Expect the number of rows in a model match another model.", "result": {"result_description": null, "result_query": "with a as (\n        \n    select\n        \n        count(*) as expression\n    from\n        airbnb.dev.dim_listings_w_hosts\n    \n\n    ),\n    b as (\n        \n    select\n        \n        count(*) * 1 as expression\n    from\n        airbnb.raw.raw_listings\n    \n\n    ),\n    final as (\n\n        select\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a cross join b\n        \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0"}, "configuration": {"test_name": "expect_table_row_count_to_equal_other_table", "test_params": {"compare_model": "source('airbnb', 'listings')", "model": "{{ get_where_subquery(ref('dim_listings_w_hosts')) }}"}}, "test_tags": []}, "test_results": {"display_name": "expect_table_row_count_to_equal_other_table", "results_sample": null, "error_message": null, "failed_rows_count": -1}}], "model.dbtlearn.dim_listings_cleansed": [{"metadata": {"test_unique_id": "test.dbtlearn.accepted_values_dim_listings_cleansed_room_type__Entire_home_apt__Private_room__Shared_room__Hotel_room.a95127e3af", "elementary_unique_id": "test.dbtlearn.accepted_values_dim_listings_cleansed_room_type__Entire_home_apt__Private_room__Shared_room__Hotel_room.a95127e3af.room_type.generic", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_listings_cleansed", "column_name": "room_type", "test_name": "accepted_values", "test_display_name": "Accepted Values", "latest_run_time": "2024-03-06T07:02:50-08:00", "latest_run_time_utc": "2024-03-06T15:02:50+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_listings_cleansed", "table_unique_id": "airbnb.dev.dim_listings_cleansed", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        room_type as value_field,\n        count(*) as n_records\n\n    from airbnb.dev.dim_listings_cleansed\n    group by room_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Entire home/apt','Private room','Shared room','Hotel room'\n)", "test_params": {"values": ["Entire home/apt", "Private room", "Shared room", "Hotel room"], "column_name": "room_type", "model": "{{ get_where_subquery(ref('dim_listings_cleansed')) }}"}, "test_created_at": null, "description": "This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.", "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        room_type as value_field,\n        count(*) as n_records\n\n    from airbnb.dev.dim_listings_cleansed\n    group by room_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Entire home/apt','Private room','Shared room','Hotel room'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": ["Entire home/apt", "Private room", "Shared room", "Hotel room"], "column_name": "room_type", "model": "{{ get_where_subquery(ref('dim_listings_cleansed')) }}"}}, "test_tags": []}, "test_results": {"display_name": "accepted_values", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbtlearn.dim_listings_minumum_nights", "elementary_unique_id": "test.dbtlearn.dim_listings_minumum_nights.None.singular", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_listings_cleansed", "column_name": null, "test_name": "dim_listings_minumum_nights", "test_display_name": "Dim Listings Minumum Nights", "latest_run_time": "2024-03-06T07:03:12-08:00", "latest_run_time_utc": "2024-03-06T15:03:12+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_listings_cleansed", "table_unique_id": "airbnb.dev.dim_listings_cleansed", "test_type": "dbt_test", "test_sub_type": "singular", "test_query": "SELECT\n    *\nFROM\n    airbnb.dev.dim_listings_cleansed\nWHERE minimum_nights < 1\nLIMIT 10", "test_params": {}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "SELECT\n    *\nFROM\n    airbnb.dev.dim_listings_cleansed\nWHERE minimum_nights < 1\nLIMIT 10"}, "configuration": {"test_name": "dim_listings_minumum_nights", "test_params": {}}, "test_tags": []}, "test_results": {"display_name": "dim_listings_minumum_nights", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbtlearn.no_nulls_in_dim_listings", "elementary_unique_id": "test.dbtlearn.no_nulls_in_dim_listings.None.singular", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_listings_cleansed", "column_name": null, "test_name": "no_nulls_in_dim_listings", "test_display_name": "No Nulls In Dim Listings", "latest_run_time": "2024-03-06T07:03:14-08:00", "latest_run_time_utc": "2024-03-06T15:03:14+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_listings_cleansed", "table_unique_id": "airbnb.dev.dim_listings_cleansed", "test_type": "dbt_test", "test_sub_type": "singular", "test_query": "SELECT * FROM airbnb.dev.dim_listings_cleansed WHERE\n    LISTING_ID IS NULL OR\n    LISTING_NAME IS NULL OR\n    ROOM_TYPE IS NULL OR\n    MINIMUM_NIGHTS IS NULL OR\n    HOST_ID IS NULL OR\n    PRICE IS NULL OR\n    CREATED_AT IS NULL OR\n    UPDATED_AT IS NULL OR\n    \n    FALSE", "test_params": {}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "SELECT * FROM airbnb.dev.dim_listings_cleansed WHERE\n    LISTING_ID IS NULL OR\n    LISTING_NAME IS NULL OR\n    ROOM_TYPE IS NULL OR\n    MINIMUM_NIGHTS IS NULL OR\n    HOST_ID IS NULL OR\n    PRICE IS NULL OR\n    CREATED_AT IS NULL OR\n    UPDATED_AT IS NULL OR\n    \n    FALSE"}, "configuration": {"test_name": "no_nulls_in_dim_listings", "test_params": {}}, "test_tags": []}, "test_results": {"display_name": "no_nulls_in_dim_listings", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbtlearn.not_null_dim_listings_cleansed_host_id.084e4105be", "elementary_unique_id": "test.dbtlearn.not_null_dim_listings_cleansed_host_id.084e4105be.host_id.generic", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_listings_cleansed", "column_name": "host_id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-03-06T07:03:18-08:00", "latest_run_time_utc": "2024-03-06T15:03:18+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_listings_cleansed", "table_unique_id": "airbnb.dev.dim_listings_cleansed", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select host_id\nfrom airbnb.dev.dim_listings_cleansed\nwhere host_id is null", "test_params": {"column_name": "host_id", "model": "{{ get_where_subquery(ref('dim_listings_cleansed')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select host_id\nfrom airbnb.dev.dim_listings_cleansed\nwhere host_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "host_id", "model": "{{ get_where_subquery(ref('dim_listings_cleansed')) }}"}}, "test_tags": []}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbtlearn.not_null_dim_listings_cleansed_listing_id.2da437bec9", "elementary_unique_id": "test.dbtlearn.not_null_dim_listings_cleansed_listing_id.2da437bec9.listing_id.generic", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_listings_cleansed", "column_name": "listing_id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-03-06T07:03:19-08:00", "latest_run_time_utc": "2024-03-06T15:03:19+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_listings_cleansed", "table_unique_id": "airbnb.dev.dim_listings_cleansed", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select listing_id\nfrom airbnb.dev.dim_listings_cleansed\nwhere listing_id is null", "test_params": {"column_name": "listing_id", "model": "{{ get_where_subquery(ref('dim_listings_cleansed')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select listing_id\nfrom airbnb.dev.dim_listings_cleansed\nwhere listing_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "listing_id", "model": "{{ get_where_subquery(ref('dim_listings_cleansed')) }}"}}, "test_tags": []}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbtlearn.positive_value_dim_listings_cleansed_minimum_nights.78fa6fc313", "elementary_unique_id": "test.dbtlearn.positive_value_dim_listings_cleansed_minimum_nights.78fa6fc313.minimum_nights.generic", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_listings_cleansed", "column_name": "minimum_nights", "test_name": "positive_value", "test_display_name": "Positive Value", "latest_run_time": "2024-03-06T07:03:21-08:00", "latest_run_time_utc": "2024-03-06T15:03:21+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_listings_cleansed", "table_unique_id": "airbnb.dev.dim_listings_cleansed", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "SELECT\n    *\nFROM\n    airbnb.dev.dim_listings_cleansed\nWHERE\n    minimum_nights < 1", "test_params": {"column_name": "minimum_nights", "model": "{{ get_where_subquery(ref('dim_listings_cleansed')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "SELECT\n    *\nFROM\n    airbnb.dev.dim_listings_cleansed\nWHERE\n    minimum_nights < 1"}, "configuration": {"test_name": "positive_value", "test_params": {"column_name": "minimum_nights", "model": "{{ get_where_subquery(ref('dim_listings_cleansed')) }}"}}, "test_tags": []}, "test_results": {"display_name": "positive_value", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbtlearn.relationships_dim_listings_cleansed_host_id__host_id__ref_dim_hosts_cleansed_.b53b94b2ad", "elementary_unique_id": "test.dbtlearn.relationships_dim_listings_cleansed_host_id__host_id__ref_dim_hosts_cleansed_.b53b94b2ad.host_id.generic", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_listings_cleansed", "column_name": "host_id", "test_name": "relationships", "test_display_name": "Relationships", "latest_run_time": "2024-03-06T07:03:23-08:00", "latest_run_time_utc": "2024-03-06T15:03:23+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_listings_cleansed", "table_unique_id": "airbnb.dev.dim_listings_cleansed", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with child as (\n    select host_id as from_field\n    from airbnb.dev.dim_listings_cleansed\n    where host_id is not null\n),\n\nparent as (\n    select host_id as to_field\n    from airbnb.dev.dim_hosts_cleansed\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null", "test_params": {"to": "ref('dim_hosts_cleansed')", "field": "host_id", "column_name": "host_id", "model": "{{ get_where_subquery(ref('dim_listings_cleansed')) }}"}, "test_created_at": null, "description": "This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \"referential integrity\".", "result": {"result_description": null, "result_query": "with child as (\n    select host_id as from_field\n    from airbnb.dev.dim_listings_cleansed\n    where host_id is not null\n),\n\nparent as (\n    select host_id as to_field\n    from airbnb.dev.dim_hosts_cleansed\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null"}, "configuration": {"test_name": "relationships", "test_params": {"to": "ref('dim_hosts_cleansed')", "field": "host_id", "column_name": "host_id", "model": "{{ get_where_subquery(ref('dim_listings_cleansed')) }}"}}, "test_tags": []}, "test_results": {"display_name": "relationships", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbtlearn.unique_dim_listings_cleansed_listing_id.930e4e859e", "elementary_unique_id": "test.dbtlearn.unique_dim_listings_cleansed_listing_id.930e4e859e.listing_id.generic", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_listings_cleansed", "column_name": "listing_id", "test_name": "unique", "test_display_name": "Unique", "latest_run_time": "2024-03-06T07:03:27-08:00", "latest_run_time_utc": "2024-03-06T15:03:27+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_listings_cleansed", "table_unique_id": "airbnb.dev.dim_listings_cleansed", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    listing_id as unique_field,\n    count(*) as n_records\n\nfrom airbnb.dev.dim_listings_cleansed\nwhere listing_id is not null\ngroup by listing_id\nhaving count(*) > 1", "test_params": {"column_name": "listing_id", "model": "{{ get_where_subquery(ref('dim_listings_cleansed')) }}"}, "test_created_at": null, "description": "This test validates that there are no duplicate values present in a field.", "result": {"result_description": null, "result_query": "select\n    listing_id as unique_field,\n    count(*) as n_records\n\nfrom airbnb.dev.dim_listings_cleansed\nwhere listing_id is not null\ngroup by listing_id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "listing_id", "model": "{{ get_where_subquery(ref('dim_listings_cleansed')) }}"}}, "test_tags": []}, "test_results": {"display_name": "unique", "results_sample": null, "error_message": null, "failed_rows_count": -1}}], "source.dbtlearn.airbnb.listings": [{"metadata": {"test_unique_id": "test.dbtlearn.dbt_expectations_source_expect_column_distinct_count_to_equal_airbnb_listings_room_type__4.1e56c20a65", "elementary_unique_id": "test.dbtlearn.dbt_expectations_source_expect_column_distinct_count_to_equal_airbnb_listings_room_type__4.1e56c20a65.room_type.expectation", "database_name": "airbnb", "schema_name": "raw", "table_name": "raw_listings", "column_name": "room_type", "test_name": "expect_column_distinct_count_to_equal", "test_display_name": "Expect Column Distinct Count To Equal", "latest_run_time": "2024-03-06T07:03:09-08:00", "latest_run_time_utc": "2024-03-06T15:03:09+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbtlearn.airbnb.listings", "table_unique_id": "airbnb.raw.raw_listings", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \ncount(distinct room_type) = 4\n as expression\n\n\n    from airbnb.raw.raw_listings\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"value": 4, "column_name": "room_type", "model": "{{ get_where_subquery(source('airbnb', 'listings')) }}"}, "test_created_at": null, "description": "Expect the number of distinct column values to be equal to a given value.", "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \ncount(distinct room_type) = 4\n as expression\n\n\n    from airbnb.raw.raw_listings\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_distinct_count_to_equal", "test_params": {"value": 4, "column_name": "room_type", "model": "{{ get_where_subquery(source('airbnb', 'listings')) }}"}}, "test_tags": []}, "test_results": {"display_name": "expect_column_distinct_count_to_equal", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbtlearn.dbt_expectations_source_expect_column_values_to_match_regex_airbnb_listings_price___0_9_0_9_.09375076a9", "elementary_unique_id": "test.dbtlearn.dbt_expectations_source_expect_column_values_to_match_regex_airbnb_listings_price___0_9_0_9_.09375076a9.price.expectation", "database_name": "airbnb", "schema_name": "raw", "table_name": "raw_listings", "column_name": "price", "test_name": "expect_column_values_to_match_regex", "test_display_name": "Expect Column Values To Match Regex", "latest_run_time": "2024-03-06T07:03:11-08:00", "latest_run_time_utc": "2024-03-06T15:03:11+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbtlearn.airbnb.listings", "table_unique_id": "airbnb.raw.raw_listings", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(price, '^\\\\$[0-9][0-9\\\\.]+$', 1, 1, 0, '')\n\n\n > 0\n as expression\n\n\n    from airbnb.raw.raw_listings\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"regex": "^\\\\$[0-9][0-9\\\\.]+$", "column_name": "price", "model": "{{ get_where_subquery(source('airbnb', 'listings')) }}"}, "test_created_at": null, "description": "Expect column entries to be strings that match a given regular expression. Valid matches can be found anywhere in the string, for example \"[at]+\" will identify the following strings as expected: \"cat\", \"hat\", \"aa\", \"a\", and \"t\", and the following strings as unexpected: \"fish\", \"dog\". Optionally, `is_raw` indicates the `regex` pattern is a \"raw\" string and should be escaped. The default is `False`.", "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(price, '^\\\\$[0-9][0-9\\\\.]+$', 1, 1, 0, '')\n\n\n > 0\n as expression\n\n\n    from airbnb.raw.raw_listings\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_values_to_match_regex", "test_params": {"regex": "^\\\\$[0-9][0-9\\\\.]+$", "column_name": "price", "model": "{{ get_where_subquery(source('airbnb', 'listings')) }}"}}, "test_tags": []}, "test_results": {"display_name": "expect_column_values_to_match_regex", "results_sample": null, "error_message": null, "failed_rows_count": -1}}], "model.dbtlearn.dim_hosts_cleansed": [{"metadata": {"test_unique_id": "test.dbtlearn.accepted_values_dim_hosts_cleansed_is_superhost__t__f.d6051554e4", "elementary_unique_id": "test.dbtlearn.accepted_values_dim_hosts_cleansed_is_superhost__t__f.d6051554e4.is_superhost.generic", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_hosts_cleansed", "column_name": "is_superhost", "test_name": "accepted_values", "test_display_name": "Accepted Values", "latest_run_time": "2024-03-06T07:02:49-08:00", "latest_run_time_utc": "2024-03-06T15:02:49+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_hosts_cleansed", "table_unique_id": "airbnb.dev.dim_hosts_cleansed", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        is_superhost as value_field,\n        count(*) as n_records\n\n    from airbnb.dev.dim_hosts_cleansed\n    group by is_superhost\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    't','f'\n)", "test_params": {"values": ["t", "f"], "column_name": "is_superhost", "model": "{{ get_where_subquery(ref('dim_hosts_cleansed')) }}"}, "test_created_at": null, "description": "This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.", "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        is_superhost as value_field,\n        count(*) as n_records\n\n    from airbnb.dev.dim_hosts_cleansed\n    group by is_superhost\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    't','f'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": ["t", "f"], "column_name": "is_superhost", "model": "{{ get_where_subquery(ref('dim_hosts_cleansed')) }}"}}, "test_tags": []}, "test_results": {"display_name": "accepted_values", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbtlearn.not_null_dim_hosts_cleansed_host_id.de84c3da05", "elementary_unique_id": "test.dbtlearn.not_null_dim_hosts_cleansed_host_id.de84c3da05.host_id.generic", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_hosts_cleansed", "column_name": "host_id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-03-06T07:03:15-08:00", "latest_run_time_utc": "2024-03-06T15:03:15+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_hosts_cleansed", "table_unique_id": "airbnb.dev.dim_hosts_cleansed", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select host_id\nfrom airbnb.dev.dim_hosts_cleansed\nwhere host_id is null", "test_params": {"column_name": "host_id", "model": "{{ get_where_subquery(ref('dim_hosts_cleansed')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select host_id\nfrom airbnb.dev.dim_hosts_cleansed\nwhere host_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "host_id", "model": "{{ get_where_subquery(ref('dim_hosts_cleansed')) }}"}}, "test_tags": []}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbtlearn.not_null_dim_hosts_cleansed_host_name.42386c5830", "elementary_unique_id": "test.dbtlearn.not_null_dim_hosts_cleansed_host_name.42386c5830.host_name.generic", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_hosts_cleansed", "column_name": "host_name", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-03-06T07:03:16-08:00", "latest_run_time_utc": "2024-03-06T15:03:16+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_hosts_cleansed", "table_unique_id": "airbnb.dev.dim_hosts_cleansed", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select host_name\nfrom airbnb.dev.dim_hosts_cleansed\nwhere host_name is null", "test_params": {"column_name": "host_name", "model": "{{ get_where_subquery(ref('dim_hosts_cleansed')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select host_name\nfrom airbnb.dev.dim_hosts_cleansed\nwhere host_name is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "host_name", "model": "{{ get_where_subquery(ref('dim_hosts_cleansed')) }}"}}, "test_tags": []}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbtlearn.unique_dim_hosts_cleansed_host_id.d7e4771347", "elementary_unique_id": "test.dbtlearn.unique_dim_hosts_cleansed_host_id.d7e4771347.host_id.generic", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_hosts_cleansed", "column_name": "host_id", "test_name": "unique", "test_display_name": "Unique", "latest_run_time": "2024-03-06T07:03:25-08:00", "latest_run_time_utc": "2024-03-06T15:03:25+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_hosts_cleansed", "table_unique_id": "airbnb.dev.dim_hosts_cleansed", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    host_id as unique_field,\n    count(*) as n_records\n\nfrom airbnb.dev.dim_hosts_cleansed\nwhere host_id is not null\ngroup by host_id\nhaving count(*) > 1", "test_params": {"column_name": "host_id", "model": "{{ get_where_subquery(ref('dim_hosts_cleansed')) }}"}, "test_created_at": null, "description": "This test validates that there are no duplicate values present in a field.", "result": {"result_description": null, "result_query": "select\n    host_id as unique_field,\n    count(*) as n_records\n\nfrom airbnb.dev.dim_hosts_cleansed\nwhere host_id is not null\ngroup by host_id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "host_id", "model": "{{ get_where_subquery(ref('dim_hosts_cleansed')) }}"}}, "test_tags": []}, "test_results": {"display_name": "unique", "results_sample": null, "error_message": null, "failed_rows_count": -1}}], "model.dbtlearn.fct_reviews": [{"metadata": {"test_unique_id": "test.dbtlearn.accepted_values_fct_reviews_review_sentiment__positive__neutral__negative.7309aafcef", "elementary_unique_id": "test.dbtlearn.accepted_values_fct_reviews_review_sentiment__positive__neutral__negative.7309aafcef.review_sentiment.generic", "database_name": "airbnb", "schema_name": "dev", "table_name": "fct_reviews", "column_name": "review_sentiment", "test_name": "accepted_values", "test_display_name": "Accepted Values", "latest_run_time": "2024-03-06T07:02:53-08:00", "latest_run_time_utc": "2024-03-06T15:02:53+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.fct_reviews", "table_unique_id": "airbnb.dev.fct_reviews", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        review_sentiment as value_field,\n        count(*) as n_records\n\n    from airbnb.dev.fct_reviews\n    group by review_sentiment\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'positive','neutral','negative'\n)", "test_params": {"values": ["positive", "neutral", "negative"], "column_name": "review_sentiment", "model": "{{ get_where_subquery(ref('fct_reviews')) }}"}, "test_created_at": null, "description": "This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.", "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        review_sentiment as value_field,\n        count(*) as n_records\n\n    from airbnb.dev.fct_reviews\n    group by review_sentiment\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'positive','neutral','negative'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": ["positive", "neutral", "negative"], "column_name": "review_sentiment", "model": "{{ get_where_subquery(ref('fct_reviews')) }}"}}, "test_tags": []}, "test_results": {"display_name": "accepted_values", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbtlearn.not_null_fct_reviews_reviewer_name.8204e43c88", "elementary_unique_id": "test.dbtlearn.not_null_fct_reviews_reviewer_name.8204e43c88.reviewer_name.generic", "database_name": "airbnb", "schema_name": "dev", "table_name": "fct_reviews", "column_name": "reviewer_name", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-03-06T07:03:20-08:00", "latest_run_time_utc": "2024-03-06T15:03:20+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.fct_reviews", "table_unique_id": "airbnb.dev.fct_reviews", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select reviewer_name\nfrom airbnb.dev.fct_reviews\nwhere reviewer_name is null", "test_params": {"column_name": "reviewer_name", "model": "{{ get_where_subquery(ref('fct_reviews')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select reviewer_name\nfrom airbnb.dev.fct_reviews\nwhere reviewer_name is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "reviewer_name", "model": "{{ get_where_subquery(ref('fct_reviews')) }}"}}, "test_tags": []}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.dbtlearn.relationships_fct_reviews_listing_id__listing_id__ref_dim_listings_cleansed_.7dd9ef05fe", "elementary_unique_id": "test.dbtlearn.relationships_fct_reviews_listing_id__listing_id__ref_dim_listings_cleansed_.7dd9ef05fe.listing_id.generic", "database_name": "airbnb", "schema_name": "dev", "table_name": "fct_reviews", "column_name": "listing_id", "test_name": "relationships", "test_display_name": "Relationships", "latest_run_time": "2024-03-06T07:03:24-08:00", "latest_run_time_utc": "2024-03-06T15:03:24+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.fct_reviews", "table_unique_id": "airbnb.dev.fct_reviews", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with child as (\n    select listing_id as from_field\n    from airbnb.dev.fct_reviews\n    where listing_id is not null\n),\n\nparent as (\n    select listing_id as to_field\n    from airbnb.dev.dim_listings_cleansed\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null", "test_params": {"to": "ref('dim_listings_cleansed')", "field": "listing_id", "column_name": "listing_id", "model": "{{ get_where_subquery(ref('fct_reviews')) }}"}, "test_created_at": null, "description": "This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \"referential integrity\".", "result": {"result_description": null, "result_query": "with child as (\n    select listing_id as from_field\n    from airbnb.dev.fct_reviews\n    where listing_id is not null\n),\n\nparent as (\n    select listing_id as to_field\n    from airbnb.dev.dim_listings_cleansed\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null"}, "configuration": {"test_name": "relationships", "test_params": {"to": "ref('dim_listings_cleansed')", "field": "listing_id", "column_name": "listing_id", "model": "{{ get_where_subquery(ref('fct_reviews')) }}"}}, "test_tags": []}, "test_results": {"display_name": "relationships", "results_sample": null, "error_message": null, "failed_rows_count": -1}}], "null": [{"metadata": {"test_unique_id": "test.dbtlearn.consistent_created_at", "elementary_unique_id": "test.dbtlearn.consistent_created_at.None.singular", "database_name": "airbnb", "schema_name": "dev", "table_name": null, "column_name": null, "test_name": "consistent_created_at", "test_display_name": "Consistent Created At", "latest_run_time": "2024-03-06T07:02:56-08:00", "latest_run_time_utc": "2024-03-06T15:02:56+00:00", "latest_run_status": "pass", "model_unique_id": null, "table_unique_id": "airbnb.dev", "test_type": "dbt_test", "test_sub_type": "singular", "test_query": "SELECT\n    *\nFROM airbnb.dev.fct_reviews fct_reviews\n  JOIN airbnb.dev.dim_listings_cleansed dim_listings\n    ON fct_reviews.listing_id = dim_listings.listing_id\n      AND fct_reviews.review_date < dim_listings.created_at", "test_params": {}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "SELECT\n    *\nFROM airbnb.dev.fct_reviews fct_reviews\n  JOIN airbnb.dev.dim_listings_cleansed dim_listings\n    ON fct_reviews.listing_id = dim_listings.listing_id\n      AND fct_reviews.review_date < dim_listings.created_at"}, "configuration": {"test_name": "consistent_created_at", "test_params": {}}, "test_tags": []}, "test_results": {"display_name": "consistent_created_at", "results_sample": null, "error_message": null, "failed_rows_count": -1}}]}, "test_results_totals": {"model.dbtlearn.dim_listings_w_hosts": {"errors": 0, "warnings": 1, "passed": 3, "failures": 0}, "model.dbtlearn.dim_listings_cleansed": {"errors": 0, "warnings": 0, "passed": 8, "failures": 0}, "source.dbtlearn.airbnb.listings": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "model.dbtlearn.dim_hosts_cleansed": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "model.dbtlearn.fct_reviews": {"errors": 0, "warnings": 0, "passed": 3, "failures": 0}, "null": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}}, "test_runs": {"model.dbtlearn.dim_listings_w_hosts": [{"metadata": {"test_unique_id": "test.dbtlearn.dbt_expectations_expect_column_max_to_be_between_dim_listings_w_hosts_price__5000.5218138b75", "elementary_unique_id": "test.dbtlearn.dbt_expectations_expect_column_max_to_be_between_dim_listings_w_hosts_price__5000.5218138b75.price.expectation", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_listings_w_hosts", "column_name": "price", "test_name": "expect_column_max_to_be_between", "test_display_name": "Expect Column Max To Be Between", "latest_run_time": "2024-03-06T07:03:01-08:00", "latest_run_time_utc": "2024-03-06T15:03:01+00:00", "latest_run_status": "warn", "model_unique_id": "model.dbtlearn.dim_listings_w_hosts", "table_unique_id": "airbnb.dev.dim_listings_w_hosts", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and max(price) <= 5000\n)\n as expression\n\n\n    from airbnb.dev.dim_listings_w_hosts\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"max_value": 5000, "column_name": "price", "model": "{{ get_where_subquery(ref('dim_listings_w_hosts')) }}"}, "test_created_at": null, "description": "Expect the column max to be between a min and max value.", "result": {"result_description": "Got 1 result, configured to warn if != 0", "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and max(price) <= 5000\n)\n as expression\n\n\n    from airbnb.dev.dim_listings_w_hosts\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_max_to_be_between", "test_params": {"max_value": 5000, "column_name": "price", "model": "{{ get_where_subquery(ref('dim_listings_w_hosts')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 1, "passed": 0, "failures": 0}, "invocations": [{"affected_rows": 1, "time_utc": "2024-03-06T15:03:01+00:00", "id": "84d4bbc9-a746-476e-a038-704fec430343", "status": "warn"}], "description": "There were no failures, no errors and 1 warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.dbtlearn.dbt_expectations_expect_column_quantile_values_to_be_between_dim_listings_w_hosts_price__500__50__0_99.71a0bfb970", "elementary_unique_id": "test.dbtlearn.dbt_expectations_expect_column_quantile_values_to_be_between_dim_listings_w_hosts_price__500__50__0_99.71a0bfb970.price.expectation", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_listings_w_hosts", "column_name": "price", "test_name": "expect_column_quantile_values_to_be_between", "test_display_name": "Expect Column Quantile Values To Be Between", "latest_run_time": "2024-03-06T07:03:03-08:00", "latest_run_time_utc": "2024-03-06T15:03:03+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_listings_w_hosts", "table_unique_id": "airbnb.dev.dim_listings_w_hosts", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and percentile_cont(0.99) within group (order by price) >= 50 and percentile_cont(0.99) within group (order by price) <= 500\n)\n as expression\n\n\n    from airbnb.dev.dim_listings_w_hosts\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"quantile": 0.99, "min_value": 50, "max_value": 500, "column_name": "price", "model": "{{ get_where_subquery(ref('dim_listings_w_hosts')) }}"}, "test_created_at": null, "description": "Expect specific provided column quantiles to be between provided min_value and max_value values.", "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and percentile_cont(0.99) within group (order by price) >= 50 and percentile_cont(0.99) within group (order by price) <= 500\n)\n as expression\n\n\n    from airbnb.dev.dim_listings_w_hosts\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_quantile_values_to_be_between", "test_params": {"quantile": 0.99, "min_value": 50, "max_value": 500, "column_name": "price", "model": "{{ get_where_subquery(ref('dim_listings_w_hosts')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-03-06T15:03:03+00:00", "id": "84d4bbc9-a746-476e-a038-704fec430343", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.dbtlearn.dbt_expectations_expect_column_values_to_be_of_type_dim_listings_w_hosts_price__number.6e17061c8a", "elementary_unique_id": "test.dbtlearn.dbt_expectations_expect_column_values_to_be_of_type_dim_listings_w_hosts_price__number.6e17061c8a.price.expectation", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_listings_w_hosts", "column_name": "price", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "latest_run_time": "2024-03-06T07:03:08-08:00", "latest_run_time_utc": "2024-03-06T15:03:08+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_listings_w_hosts", "table_unique_id": "airbnb.dev.dim_listings_w_hosts", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('LISTING_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LISTING_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ROOM_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINIMUM_NIGHTS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HOST_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HOST_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HOST_IS_SUPERHOST' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UPDATED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PRICE'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "number", "column_name": "price", "model": "{{ get_where_subquery(ref('dim_listings_w_hosts')) }}"}, "test_created_at": null, "description": "Expect a column to be of a specified data type.", "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('LISTING_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LISTING_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ROOM_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINIMUM_NIGHTS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HOST_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HOST_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HOST_IS_SUPERHOST' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UPDATED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PRICE'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "number", "column_name": "price", "model": "{{ get_where_subquery(ref('dim_listings_w_hosts')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-03-06T15:03:08+00:00", "id": "84d4bbc9-a746-476e-a038-704fec430343", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.dbtlearn.dbt_expectations_expect_table_row_count_to_equal_other_table_dim_listings_w_hosts_source_airbnb_listings_.637b6229da", "elementary_unique_id": "test.dbtlearn.dbt_expectations_expect_table_row_count_to_equal_other_table_dim_listings_w_hosts_source_airbnb_listings_.637b6229da.None.expectation", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_listings_w_hosts", "column_name": null, "test_name": "expect_table_row_count_to_equal_other_table", "test_display_name": "Expect Table Row Count To Equal Other Table", "latest_run_time": "2024-03-06T07:03:08-08:00", "latest_run_time_utc": "2024-03-06T15:03:08+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_listings_w_hosts", "table_unique_id": "airbnb.dev.dim_listings_w_hosts", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with a as (\n        \n    select\n        \n        count(*) as expression\n    from\n        airbnb.dev.dim_listings_w_hosts\n    \n\n    ),\n    b as (\n        \n    select\n        \n        count(*) * 1 as expression\n    from\n        airbnb.raw.raw_listings\n    \n\n    ),\n    final as (\n\n        select\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a cross join b\n        \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0", "test_params": {"compare_model": "source('airbnb', 'listings')", "model": "{{ get_where_subquery(ref('dim_listings_w_hosts')) }}"}, "test_created_at": null, "description": "Expect the number of rows in a model match another model.", "result": {"result_description": null, "result_query": "with a as (\n        \n    select\n        \n        count(*) as expression\n    from\n        airbnb.dev.dim_listings_w_hosts\n    \n\n    ),\n    b as (\n        \n    select\n        \n        count(*) * 1 as expression\n    from\n        airbnb.raw.raw_listings\n    \n\n    ),\n    final as (\n\n        select\n            \n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        \n            a cross join b\n        \n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        \n        expression_difference > 0.0"}, "configuration": {"test_name": "expect_table_row_count_to_equal_other_table", "test_params": {"compare_model": "source('airbnb', 'listings')", "model": "{{ get_where_subquery(ref('dim_listings_w_hosts')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-03-06T15:03:08+00:00", "id": "84d4bbc9-a746-476e-a038-704fec430343", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}], "model.dbtlearn.dim_listings_cleansed": [{"metadata": {"test_unique_id": "test.dbtlearn.accepted_values_dim_listings_cleansed_room_type__Entire_home_apt__Private_room__Shared_room__Hotel_room.a95127e3af", "elementary_unique_id": "test.dbtlearn.accepted_values_dim_listings_cleansed_room_type__Entire_home_apt__Private_room__Shared_room__Hotel_room.a95127e3af.room_type.generic", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_listings_cleansed", "column_name": "room_type", "test_name": "accepted_values", "test_display_name": "Accepted Values", "latest_run_time": "2024-03-06T07:02:50-08:00", "latest_run_time_utc": "2024-03-06T15:02:50+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_listings_cleansed", "table_unique_id": "airbnb.dev.dim_listings_cleansed", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        room_type as value_field,\n        count(*) as n_records\n\n    from airbnb.dev.dim_listings_cleansed\n    group by room_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Entire home/apt','Private room','Shared room','Hotel room'\n)", "test_params": {"values": ["Entire home/apt", "Private room", "Shared room", "Hotel room"], "column_name": "room_type", "model": "{{ get_where_subquery(ref('dim_listings_cleansed')) }}"}, "test_created_at": null, "description": "This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.", "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        room_type as value_field,\n        count(*) as n_records\n\n    from airbnb.dev.dim_listings_cleansed\n    group by room_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Entire home/apt','Private room','Shared room','Hotel room'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": ["Entire home/apt", "Private room", "Shared room", "Hotel room"], "column_name": "room_type", "model": "{{ get_where_subquery(ref('dim_listings_cleansed')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-03-06T15:02:50+00:00", "id": "84d4bbc9-a746-476e-a038-704fec430343", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.dbtlearn.dim_listings_minumum_nights", "elementary_unique_id": "test.dbtlearn.dim_listings_minumum_nights.None.singular", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_listings_cleansed", "column_name": null, "test_name": "dim_listings_minumum_nights", "test_display_name": "Dim Listings Minumum Nights", "latest_run_time": "2024-03-06T07:03:12-08:00", "latest_run_time_utc": "2024-03-06T15:03:12+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_listings_cleansed", "table_unique_id": "airbnb.dev.dim_listings_cleansed", "test_type": "dbt_test", "test_sub_type": "singular", "test_query": "SELECT\n    *\nFROM\n    airbnb.dev.dim_listings_cleansed\nWHERE minimum_nights < 1\nLIMIT 10", "test_params": {}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "SELECT\n    *\nFROM\n    airbnb.dev.dim_listings_cleansed\nWHERE minimum_nights < 1\nLIMIT 10"}, "configuration": {"test_name": "dim_listings_minumum_nights", "test_params": {}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-03-06T15:03:12+00:00", "id": "84d4bbc9-a746-476e-a038-704fec430343", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.dbtlearn.no_nulls_in_dim_listings", "elementary_unique_id": "test.dbtlearn.no_nulls_in_dim_listings.None.singular", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_listings_cleansed", "column_name": null, "test_name": "no_nulls_in_dim_listings", "test_display_name": "No Nulls In Dim Listings", "latest_run_time": "2024-03-06T07:03:14-08:00", "latest_run_time_utc": "2024-03-06T15:03:14+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_listings_cleansed", "table_unique_id": "airbnb.dev.dim_listings_cleansed", "test_type": "dbt_test", "test_sub_type": "singular", "test_query": "SELECT * FROM airbnb.dev.dim_listings_cleansed WHERE\n    LISTING_ID IS NULL OR\n    LISTING_NAME IS NULL OR\n    ROOM_TYPE IS NULL OR\n    MINIMUM_NIGHTS IS NULL OR\n    HOST_ID IS NULL OR\n    PRICE IS NULL OR\n    CREATED_AT IS NULL OR\n    UPDATED_AT IS NULL OR\n    \n    FALSE", "test_params": {}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "SELECT * FROM airbnb.dev.dim_listings_cleansed WHERE\n    LISTING_ID IS NULL OR\n    LISTING_NAME IS NULL OR\n    ROOM_TYPE IS NULL OR\n    MINIMUM_NIGHTS IS NULL OR\n    HOST_ID IS NULL OR\n    PRICE IS NULL OR\n    CREATED_AT IS NULL OR\n    UPDATED_AT IS NULL OR\n    \n    FALSE"}, "configuration": {"test_name": "no_nulls_in_dim_listings", "test_params": {}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-03-06T15:03:14+00:00", "id": "84d4bbc9-a746-476e-a038-704fec430343", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.dbtlearn.not_null_dim_listings_cleansed_host_id.084e4105be", "elementary_unique_id": "test.dbtlearn.not_null_dim_listings_cleansed_host_id.084e4105be.host_id.generic", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_listings_cleansed", "column_name": "host_id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-03-06T07:03:18-08:00", "latest_run_time_utc": "2024-03-06T15:03:18+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_listings_cleansed", "table_unique_id": "airbnb.dev.dim_listings_cleansed", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select host_id\nfrom airbnb.dev.dim_listings_cleansed\nwhere host_id is null", "test_params": {"column_name": "host_id", "model": "{{ get_where_subquery(ref('dim_listings_cleansed')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select host_id\nfrom airbnb.dev.dim_listings_cleansed\nwhere host_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "host_id", "model": "{{ get_where_subquery(ref('dim_listings_cleansed')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-03-06T15:03:18+00:00", "id": "84d4bbc9-a746-476e-a038-704fec430343", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.dbtlearn.not_null_dim_listings_cleansed_listing_id.2da437bec9", "elementary_unique_id": "test.dbtlearn.not_null_dim_listings_cleansed_listing_id.2da437bec9.listing_id.generic", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_listings_cleansed", "column_name": "listing_id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-03-06T07:03:19-08:00", "latest_run_time_utc": "2024-03-06T15:03:19+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_listings_cleansed", "table_unique_id": "airbnb.dev.dim_listings_cleansed", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select listing_id\nfrom airbnb.dev.dim_listings_cleansed\nwhere listing_id is null", "test_params": {"column_name": "listing_id", "model": "{{ get_where_subquery(ref('dim_listings_cleansed')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select listing_id\nfrom airbnb.dev.dim_listings_cleansed\nwhere listing_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "listing_id", "model": "{{ get_where_subquery(ref('dim_listings_cleansed')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-03-06T15:03:19+00:00", "id": "84d4bbc9-a746-476e-a038-704fec430343", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.dbtlearn.positive_value_dim_listings_cleansed_minimum_nights.78fa6fc313", "elementary_unique_id": "test.dbtlearn.positive_value_dim_listings_cleansed_minimum_nights.78fa6fc313.minimum_nights.generic", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_listings_cleansed", "column_name": "minimum_nights", "test_name": "positive_value", "test_display_name": "Positive Value", "latest_run_time": "2024-03-06T07:03:21-08:00", "latest_run_time_utc": "2024-03-06T15:03:21+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_listings_cleansed", "table_unique_id": "airbnb.dev.dim_listings_cleansed", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "SELECT\n    *\nFROM\n    airbnb.dev.dim_listings_cleansed\nWHERE\n    minimum_nights < 1", "test_params": {"column_name": "minimum_nights", "model": "{{ get_where_subquery(ref('dim_listings_cleansed')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "SELECT\n    *\nFROM\n    airbnb.dev.dim_listings_cleansed\nWHERE\n    minimum_nights < 1"}, "configuration": {"test_name": "positive_value", "test_params": {"column_name": "minimum_nights", "model": "{{ get_where_subquery(ref('dim_listings_cleansed')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-03-06T15:03:21+00:00", "id": "84d4bbc9-a746-476e-a038-704fec430343", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.dbtlearn.relationships_dim_listings_cleansed_host_id__host_id__ref_dim_hosts_cleansed_.b53b94b2ad", "elementary_unique_id": "test.dbtlearn.relationships_dim_listings_cleansed_host_id__host_id__ref_dim_hosts_cleansed_.b53b94b2ad.host_id.generic", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_listings_cleansed", "column_name": "host_id", "test_name": "relationships", "test_display_name": "Relationships", "latest_run_time": "2024-03-06T07:03:23-08:00", "latest_run_time_utc": "2024-03-06T15:03:23+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_listings_cleansed", "table_unique_id": "airbnb.dev.dim_listings_cleansed", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with child as (\n    select host_id as from_field\n    from airbnb.dev.dim_listings_cleansed\n    where host_id is not null\n),\n\nparent as (\n    select host_id as to_field\n    from airbnb.dev.dim_hosts_cleansed\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null", "test_params": {"to": "ref('dim_hosts_cleansed')", "field": "host_id", "column_name": "host_id", "model": "{{ get_where_subquery(ref('dim_listings_cleansed')) }}"}, "test_created_at": null, "description": "This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \"referential integrity\".", "result": {"result_description": null, "result_query": "with child as (\n    select host_id as from_field\n    from airbnb.dev.dim_listings_cleansed\n    where host_id is not null\n),\n\nparent as (\n    select host_id as to_field\n    from airbnb.dev.dim_hosts_cleansed\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null"}, "configuration": {"test_name": "relationships", "test_params": {"to": "ref('dim_hosts_cleansed')", "field": "host_id", "column_name": "host_id", "model": "{{ get_where_subquery(ref('dim_listings_cleansed')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-03-06T15:03:23+00:00", "id": "84d4bbc9-a746-476e-a038-704fec430343", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.dbtlearn.unique_dim_listings_cleansed_listing_id.930e4e859e", "elementary_unique_id": "test.dbtlearn.unique_dim_listings_cleansed_listing_id.930e4e859e.listing_id.generic", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_listings_cleansed", "column_name": "listing_id", "test_name": "unique", "test_display_name": "Unique", "latest_run_time": "2024-03-06T07:03:27-08:00", "latest_run_time_utc": "2024-03-06T15:03:27+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_listings_cleansed", "table_unique_id": "airbnb.dev.dim_listings_cleansed", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    listing_id as unique_field,\n    count(*) as n_records\n\nfrom airbnb.dev.dim_listings_cleansed\nwhere listing_id is not null\ngroup by listing_id\nhaving count(*) > 1", "test_params": {"column_name": "listing_id", "model": "{{ get_where_subquery(ref('dim_listings_cleansed')) }}"}, "test_created_at": null, "description": "This test validates that there are no duplicate values present in a field.", "result": {"result_description": null, "result_query": "select\n    listing_id as unique_field,\n    count(*) as n_records\n\nfrom airbnb.dev.dim_listings_cleansed\nwhere listing_id is not null\ngroup by listing_id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "listing_id", "model": "{{ get_where_subquery(ref('dim_listings_cleansed')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-03-06T15:03:27+00:00", "id": "84d4bbc9-a746-476e-a038-704fec430343", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}], "source.dbtlearn.airbnb.listings": [{"metadata": {"test_unique_id": "test.dbtlearn.dbt_expectations_source_expect_column_distinct_count_to_equal_airbnb_listings_room_type__4.1e56c20a65", "elementary_unique_id": "test.dbtlearn.dbt_expectations_source_expect_column_distinct_count_to_equal_airbnb_listings_room_type__4.1e56c20a65.room_type.expectation", "database_name": "airbnb", "schema_name": "raw", "table_name": "raw_listings", "column_name": "room_type", "test_name": "expect_column_distinct_count_to_equal", "test_display_name": "Expect Column Distinct Count To Equal", "latest_run_time": "2024-03-06T07:03:09-08:00", "latest_run_time_utc": "2024-03-06T15:03:09+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbtlearn.airbnb.listings", "table_unique_id": "airbnb.raw.raw_listings", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \ncount(distinct room_type) = 4\n as expression\n\n\n    from airbnb.raw.raw_listings\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"value": 4, "column_name": "room_type", "model": "{{ get_where_subquery(source('airbnb', 'listings')) }}"}, "test_created_at": null, "description": "Expect the number of distinct column values to be equal to a given value.", "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \ncount(distinct room_type) = 4\n as expression\n\n\n    from airbnb.raw.raw_listings\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_distinct_count_to_equal", "test_params": {"value": 4, "column_name": "room_type", "model": "{{ get_where_subquery(source('airbnb', 'listings')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-03-06T15:03:09+00:00", "id": "84d4bbc9-a746-476e-a038-704fec430343", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.dbtlearn.dbt_expectations_source_expect_column_values_to_match_regex_airbnb_listings_price___0_9_0_9_.09375076a9", "elementary_unique_id": "test.dbtlearn.dbt_expectations_source_expect_column_values_to_match_regex_airbnb_listings_price___0_9_0_9_.09375076a9.price.expectation", "database_name": "airbnb", "schema_name": "raw", "table_name": "raw_listings", "column_name": "price", "test_name": "expect_column_values_to_match_regex", "test_display_name": "Expect Column Values To Match Regex", "latest_run_time": "2024-03-06T07:03:11-08:00", "latest_run_time_utc": "2024-03-06T15:03:11+00:00", "latest_run_status": "pass", "model_unique_id": "source.dbtlearn.airbnb.listings", "table_unique_id": "airbnb.raw.raw_listings", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(price, '^\\\\$[0-9][0-9\\\\.]+$', 1, 1, 0, '')\n\n\n > 0\n as expression\n\n\n    from airbnb.raw.raw_listings\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"regex": "^\\\\$[0-9][0-9\\\\.]+$", "column_name": "price", "model": "{{ get_where_subquery(source('airbnb', 'listings')) }}"}, "test_created_at": null, "description": "Expect column entries to be strings that match a given regular expression. Valid matches can be found anywhere in the string, for example \"[at]+\" will identify the following strings as expected: \"cat\", \"hat\", \"aa\", \"a\", and \"t\", and the following strings as unexpected: \"fish\", \"dog\". Optionally, `is_raw` indicates the `regex` pattern is a \"raw\" string and should be escaped. The default is `False`.", "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(price, '^\\\\$[0-9][0-9\\\\.]+$', 1, 1, 0, '')\n\n\n > 0\n as expression\n\n\n    from airbnb.raw.raw_listings\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_values_to_match_regex", "test_params": {"regex": "^\\\\$[0-9][0-9\\\\.]+$", "column_name": "price", "model": "{{ get_where_subquery(source('airbnb', 'listings')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-03-06T15:03:11+00:00", "id": "84d4bbc9-a746-476e-a038-704fec430343", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}], "model.dbtlearn.dim_hosts_cleansed": [{"metadata": {"test_unique_id": "test.dbtlearn.accepted_values_dim_hosts_cleansed_is_superhost__t__f.d6051554e4", "elementary_unique_id": "test.dbtlearn.accepted_values_dim_hosts_cleansed_is_superhost__t__f.d6051554e4.is_superhost.generic", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_hosts_cleansed", "column_name": "is_superhost", "test_name": "accepted_values", "test_display_name": "Accepted Values", "latest_run_time": "2024-03-06T07:02:49-08:00", "latest_run_time_utc": "2024-03-06T15:02:49+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_hosts_cleansed", "table_unique_id": "airbnb.dev.dim_hosts_cleansed", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        is_superhost as value_field,\n        count(*) as n_records\n\n    from airbnb.dev.dim_hosts_cleansed\n    group by is_superhost\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    't','f'\n)", "test_params": {"values": ["t", "f"], "column_name": "is_superhost", "model": "{{ get_where_subquery(ref('dim_hosts_cleansed')) }}"}, "test_created_at": null, "description": "This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.", "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        is_superhost as value_field,\n        count(*) as n_records\n\n    from airbnb.dev.dim_hosts_cleansed\n    group by is_superhost\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    't','f'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": ["t", "f"], "column_name": "is_superhost", "model": "{{ get_where_subquery(ref('dim_hosts_cleansed')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-03-06T15:02:49+00:00", "id": "84d4bbc9-a746-476e-a038-704fec430343", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.dbtlearn.not_null_dim_hosts_cleansed_host_id.de84c3da05", "elementary_unique_id": "test.dbtlearn.not_null_dim_hosts_cleansed_host_id.de84c3da05.host_id.generic", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_hosts_cleansed", "column_name": "host_id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-03-06T07:03:15-08:00", "latest_run_time_utc": "2024-03-06T15:03:15+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_hosts_cleansed", "table_unique_id": "airbnb.dev.dim_hosts_cleansed", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select host_id\nfrom airbnb.dev.dim_hosts_cleansed\nwhere host_id is null", "test_params": {"column_name": "host_id", "model": "{{ get_where_subquery(ref('dim_hosts_cleansed')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select host_id\nfrom airbnb.dev.dim_hosts_cleansed\nwhere host_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "host_id", "model": "{{ get_where_subquery(ref('dim_hosts_cleansed')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-03-06T15:03:15+00:00", "id": "84d4bbc9-a746-476e-a038-704fec430343", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.dbtlearn.not_null_dim_hosts_cleansed_host_name.42386c5830", "elementary_unique_id": "test.dbtlearn.not_null_dim_hosts_cleansed_host_name.42386c5830.host_name.generic", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_hosts_cleansed", "column_name": "host_name", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-03-06T07:03:16-08:00", "latest_run_time_utc": "2024-03-06T15:03:16+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_hosts_cleansed", "table_unique_id": "airbnb.dev.dim_hosts_cleansed", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select host_name\nfrom airbnb.dev.dim_hosts_cleansed\nwhere host_name is null", "test_params": {"column_name": "host_name", "model": "{{ get_where_subquery(ref('dim_hosts_cleansed')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select host_name\nfrom airbnb.dev.dim_hosts_cleansed\nwhere host_name is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "host_name", "model": "{{ get_where_subquery(ref('dim_hosts_cleansed')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-03-06T15:03:16+00:00", "id": "84d4bbc9-a746-476e-a038-704fec430343", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.dbtlearn.unique_dim_hosts_cleansed_host_id.d7e4771347", "elementary_unique_id": "test.dbtlearn.unique_dim_hosts_cleansed_host_id.d7e4771347.host_id.generic", "database_name": "airbnb", "schema_name": "dev", "table_name": "dim_hosts_cleansed", "column_name": "host_id", "test_name": "unique", "test_display_name": "Unique", "latest_run_time": "2024-03-06T07:03:25-08:00", "latest_run_time_utc": "2024-03-06T15:03:25+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.dim_hosts_cleansed", "table_unique_id": "airbnb.dev.dim_hosts_cleansed", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    host_id as unique_field,\n    count(*) as n_records\n\nfrom airbnb.dev.dim_hosts_cleansed\nwhere host_id is not null\ngroup by host_id\nhaving count(*) > 1", "test_params": {"column_name": "host_id", "model": "{{ get_where_subquery(ref('dim_hosts_cleansed')) }}"}, "test_created_at": null, "description": "This test validates that there are no duplicate values present in a field.", "result": {"result_description": null, "result_query": "select\n    host_id as unique_field,\n    count(*) as n_records\n\nfrom airbnb.dev.dim_hosts_cleansed\nwhere host_id is not null\ngroup by host_id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "host_id", "model": "{{ get_where_subquery(ref('dim_hosts_cleansed')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-03-06T15:03:25+00:00", "id": "84d4bbc9-a746-476e-a038-704fec430343", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}], "model.dbtlearn.fct_reviews": [{"metadata": {"test_unique_id": "test.dbtlearn.accepted_values_fct_reviews_review_sentiment__positive__neutral__negative.7309aafcef", "elementary_unique_id": "test.dbtlearn.accepted_values_fct_reviews_review_sentiment__positive__neutral__negative.7309aafcef.review_sentiment.generic", "database_name": "airbnb", "schema_name": "dev", "table_name": "fct_reviews", "column_name": "review_sentiment", "test_name": "accepted_values", "test_display_name": "Accepted Values", "latest_run_time": "2024-03-06T07:02:53-08:00", "latest_run_time_utc": "2024-03-06T15:02:53+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.fct_reviews", "table_unique_id": "airbnb.dev.fct_reviews", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        review_sentiment as value_field,\n        count(*) as n_records\n\n    from airbnb.dev.fct_reviews\n    group by review_sentiment\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'positive','neutral','negative'\n)", "test_params": {"values": ["positive", "neutral", "negative"], "column_name": "review_sentiment", "model": "{{ get_where_subquery(ref('fct_reviews')) }}"}, "test_created_at": null, "description": "This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.", "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        review_sentiment as value_field,\n        count(*) as n_records\n\n    from airbnb.dev.fct_reviews\n    group by review_sentiment\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'positive','neutral','negative'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": ["positive", "neutral", "negative"], "column_name": "review_sentiment", "model": "{{ get_where_subquery(ref('fct_reviews')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-03-06T15:02:53+00:00", "id": "84d4bbc9-a746-476e-a038-704fec430343", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.dbtlearn.not_null_fct_reviews_reviewer_name.8204e43c88", "elementary_unique_id": "test.dbtlearn.not_null_fct_reviews_reviewer_name.8204e43c88.reviewer_name.generic", "database_name": "airbnb", "schema_name": "dev", "table_name": "fct_reviews", "column_name": "reviewer_name", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-03-06T07:03:20-08:00", "latest_run_time_utc": "2024-03-06T15:03:20+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.fct_reviews", "table_unique_id": "airbnb.dev.fct_reviews", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select reviewer_name\nfrom airbnb.dev.fct_reviews\nwhere reviewer_name is null", "test_params": {"column_name": "reviewer_name", "model": "{{ get_where_subquery(ref('fct_reviews')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select reviewer_name\nfrom airbnb.dev.fct_reviews\nwhere reviewer_name is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "reviewer_name", "model": "{{ get_where_subquery(ref('fct_reviews')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-03-06T15:03:20+00:00", "id": "84d4bbc9-a746-476e-a038-704fec430343", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.dbtlearn.relationships_fct_reviews_listing_id__listing_id__ref_dim_listings_cleansed_.7dd9ef05fe", "elementary_unique_id": "test.dbtlearn.relationships_fct_reviews_listing_id__listing_id__ref_dim_listings_cleansed_.7dd9ef05fe.listing_id.generic", "database_name": "airbnb", "schema_name": "dev", "table_name": "fct_reviews", "column_name": "listing_id", "test_name": "relationships", "test_display_name": "Relationships", "latest_run_time": "2024-03-06T07:03:24-08:00", "latest_run_time_utc": "2024-03-06T15:03:24+00:00", "latest_run_status": "pass", "model_unique_id": "model.dbtlearn.fct_reviews", "table_unique_id": "airbnb.dev.fct_reviews", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with child as (\n    select listing_id as from_field\n    from airbnb.dev.fct_reviews\n    where listing_id is not null\n),\n\nparent as (\n    select listing_id as to_field\n    from airbnb.dev.dim_listings_cleansed\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null", "test_params": {"to": "ref('dim_listings_cleansed')", "field": "listing_id", "column_name": "listing_id", "model": "{{ get_where_subquery(ref('fct_reviews')) }}"}, "test_created_at": null, "description": "This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \"referential integrity\".", "result": {"result_description": null, "result_query": "with child as (\n    select listing_id as from_field\n    from airbnb.dev.fct_reviews\n    where listing_id is not null\n),\n\nparent as (\n    select listing_id as to_field\n    from airbnb.dev.dim_listings_cleansed\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null"}, "configuration": {"test_name": "relationships", "test_params": {"to": "ref('dim_listings_cleansed')", "field": "listing_id", "column_name": "listing_id", "model": "{{ get_where_subquery(ref('fct_reviews')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-03-06T15:03:24+00:00", "id": "84d4bbc9-a746-476e-a038-704fec430343", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}], "null": [{"metadata": {"test_unique_id": "test.dbtlearn.consistent_created_at", "elementary_unique_id": "test.dbtlearn.consistent_created_at.None.singular", "database_name": "airbnb", "schema_name": "dev", "table_name": null, "column_name": null, "test_name": "consistent_created_at", "test_display_name": "Consistent Created At", "latest_run_time": "2024-03-06T07:02:56-08:00", "latest_run_time_utc": "2024-03-06T15:02:56+00:00", "latest_run_status": "pass", "model_unique_id": null, "table_unique_id": "airbnb.dev", "test_type": "dbt_test", "test_sub_type": "singular", "test_query": "SELECT\n    *\nFROM airbnb.dev.fct_reviews fct_reviews\n  JOIN airbnb.dev.dim_listings_cleansed dim_listings\n    ON fct_reviews.listing_id = dim_listings.listing_id\n      AND fct_reviews.review_date < dim_listings.created_at", "test_params": {}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "SELECT\n    *\nFROM airbnb.dev.fct_reviews fct_reviews\n  JOIN airbnb.dev.dim_listings_cleansed dim_listings\n    ON fct_reviews.listing_id = dim_listings.listing_id\n      AND fct_reviews.review_date < dim_listings.created_at"}, "configuration": {"test_name": "consistent_created_at", "test_params": {}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-03-06T15:02:56+00:00", "id": "84d4bbc9-a746-476e-a038-704fec430343", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}]}, "test_runs_totals": {"model.dbtlearn.dim_listings_w_hosts": {"errors": 0, "warnings": 1, "passed": 3, "failures": 0}, "model.dbtlearn.dim_listings_cleansed": {"errors": 0, "warnings": 0, "passed": 8, "failures": 0}, "source.dbtlearn.airbnb.listings": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "model.dbtlearn.dim_hosts_cleansed": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "model.dbtlearn.fct_reviews": {"errors": 0, "warnings": 0, "passed": 3, "failures": 0}, "null": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}}, "coverages": {"model.dbtlearn.dim_listings_cleansed": {"table_tests": 2, "column_tests": 6}, "model.dbtlearn.dim_hosts_cleansed": {"table_tests": 0, "column_tests": 4}, "model.dbtlearn.dim_listings_w_hosts": {"table_tests": 1, "column_tests": 3}, "model.dbtlearn.fct_reviews": {"table_tests": 0, "column_tests": 3}, "source.dbtlearn.airbnb.listings": {"table_tests": 0, "column_tests": 2}}, "model_runs": [{"unique_id": "model.dbtlearn.dim_hosts_cleansed", "schema": "dev", "name": "dim_hosts_cleansed", "status": "success", "last_exec_time": 1.2, "median_exec_time": 1.2, "compiled_code": "\n\nWITH  __dbt__cte__src_hosts as (\nWITH raw_hosts AS (\n    SELECT \n        *\n    FROM airbnb.raw.raw_hosts\n)\n\nSELECT\n    id AS host_id,\n\tname AS host_name,\n\tis_superhost,\n\tcreated_at,\n\tupdated_at\nFROM raw_hosts\n), src_hosts AS (\n    SELECT\n        *\n    FROM __dbt__cte__src_hosts\n)\n\nSELECT\n    host_id,\n\tNVL(\n        host_name, \n        'Anonymous'\n    ) AS host_name,\n\tis_superhost,\n\tcreated_at,\n\tupdated_at\nFROM src_hosts", "last_generated_at": "2024-03-08T20:36:45+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 1}, "runs": [{"id": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "time_utc": "2024-03-08T20:36:45+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 1.2}]}, {"unique_id": "model.dbtlearn.dim_listings_cleansed", "schema": "dev", "name": "dim_listings_cleansed", "status": "success", "last_exec_time": 1.2, "median_exec_time": 1.2, "compiled_code": "\n\nWITH  __dbt__cte__src_listings as (\nWITH raw_listings AS (\n    SELECT\n        *\n    FROM\n       airbnb.raw.raw_listings\n)\nSELECT\n    id AS listing_id,\n    name AS listing_name,\n    listing_url,\n    room_type,\n    minimum_nights,\n    host_id,\n    price AS price_str,\n    created_at,\n    updated_at\nFROM\n    raw_listings\n), src_listings AS (\n    SELECT\n        *\n    FROM __dbt__cte__src_listings\n)\n\nSELECT\n  listing_id,\n  listing_name,\n  room_type,\n  CASE\n    WHEN minimum_nights = 0 THEN 1\n    ELSE minimum_nights\n  END AS minimum_nights,\n  host_id,\n  REPLACE(\n    price_str,\n    '$'\n  ) :: NUMBER(\n    10,\n    2\n  ) AS price,\n  created_at,\n  updated_at\nFROM\n  src_listings", "last_generated_at": "2024-03-08T20:36:45+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 1}, "runs": [{"id": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "time_utc": "2024-03-08T20:36:45+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 1.2}]}, {"unique_id": "model.dbtlearn.fct_reviews", "schema": "dev", "name": "fct_reviews", "status": "success", "last_exec_time": 3.0, "median_exec_time": 3.0, "compiled_code": "\nWITH  __dbt__cte__src_reviews as (\nWITH raw_reviews AS (\n    SELECT \n        *\n    FROM airbnb.raw.raw_reviews\n)\n\nSELECT \n    listing_id,\n\tdate AS review_date,\n\treviewer_name,\n\tcomments AS review_text,\n\tsentiment AS review_sentiment\nFROM raw_reviews\n), src_reviews AS (\n  SELECT \n    * \n  FROM __dbt__cte__src_reviews\n)\nSELECT \n  md5(cast(coalesce(cast(listing_id as \n    varchar\n), '') || '-' || coalesce(cast(review_date as \n    varchar\n), '') || '-' || coalesce(cast(reviewer_name as \n    varchar\n), '') || '-' || coalesce(cast(review_text as \n    varchar\n), '') as \n    varchar\n)) AS review_id,\n  * \nFROM src_reviews\nWHERE review_text is not null\n\n  AND review_date > (select max(review_date) from airbnb.dev.fct_reviews)\n", "last_generated_at": "2024-03-08T20:36:45+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 1}, "runs": [{"id": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "time_utc": "2024-03-08T20:36:45+00:00", "status": "success", "full_refresh": false, "materialization": "incremental", "execution_time": 3.0}]}, {"unique_id": "model.dbtlearn.dim_listings_w_hosts", "schema": "dev", "name": "dim_listings_w_hosts", "status": "success", "last_exec_time": 2.6, "median_exec_time": 2.6, "compiled_code": "WITH\nl AS (\n    SELECT\n        *\n    FROM\n        airbnb.dev.dim_listings_cleansed\n),\n\nh AS (\n    SELECT\n        * \n    FROM airbnb.dev.dim_hosts_cleansed\n)\n\nSELECT \n    l.listing_id,\n    l.listing_name,\n    l.room_type,\n    l.minimum_nights,\n    l.price,\n    l.host_id,\n    h.host_name,\n    h.is_superhost as host_is_superhost,\n    l.created_at,\n    GREATEST(l.updated_at, h.updated_at) as updated_at\nFROM l\nLEFT JOIN h \n  ON (h.host_id = l.host_id)", "last_generated_at": "2024-03-08T20:36:45+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 1}, "runs": [{"id": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "time_utc": "2024-03-08T20:36:45+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 2.6}]}, {"unique_id": "model.dbtlearn.mart_fullmoon_reviews", "schema": "dev", "name": "mart_fullmoon_reviews", "status": "success", "last_exec_time": 4.6, "median_exec_time": 4.6, "compiled_code": "\n\nWITH fct_reviews AS (\n    SELECT * FROM airbnb.dev.fct_reviews\n),\nfull_moon_dates AS (\n    SELECT * FROM airbnb.dev.seed_full_moon_dates\n)\n\nSELECT\n  r.*,\n  CASE\n    WHEN fm.full_moon_date IS NULL THEN 'not full moon'\n    ELSE 'full moon'\n  END AS is_full_moon\nFROM fct_reviews r\n  LEFT JOIN full_moon_dates fm\n    ON (TO_DATE(r.review_date) = DATEADD(DAY, 1, fm.full_moon_date))", "last_generated_at": "2024-03-08T20:36:45+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 1}, "runs": [{"id": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "time_utc": "2024-03-08T20:36:45+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 4.6}]}], "model_runs_totals": {"model.dbtlearn.dim_hosts_cleansed": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "model.dbtlearn.dim_listings_cleansed": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "model.dbtlearn.fct_reviews": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "model.dbtlearn.dim_listings_w_hosts": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "model.dbtlearn.mart_fullmoon_reviews": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}}, "filters": {"test_results": [{"name": "warnings", "display_name": "Warnings", "model_unique_ids": ["model.dbtlearn.dim_listings_w_hosts"]}, {"name": "passed", "display_name": "Passed", "model_unique_ids": ["source.dbtlearn.airbnb.listings", null, "model.dbtlearn.dim_listings_w_hosts", "model.dbtlearn.dim_listings_cleansed", "model.dbtlearn.dim_hosts_cleansed", "model.dbtlearn.fct_reviews"]}, {"name": "no_test", "display_name": "No Tests", "model_unique_ids": ["model.dbtlearn.src_reviews", "model.dbtlearn.src_listings", "model.dbtlearn.mart_fullmoon_reviews", "source.dbtlearn.airbnb.reviews", "source.dbtlearn.airbnb.hosts", "model.dbtlearn.src_hosts_copy", "model.dbtlearn.src_hosts"]}], "test_runs": [{"name": "warnings", "display_name": "Warnings", "model_unique_ids": ["model.dbtlearn.dim_listings_w_hosts"]}, {"name": "passed", "display_name": "Passed", "model_unique_ids": ["source.dbtlearn.airbnb.listings", null, "model.dbtlearn.dim_listings_w_hosts", "model.dbtlearn.dim_listings_cleansed", "model.dbtlearn.dim_hosts_cleansed", "model.dbtlearn.fct_reviews"]}, {"name": "no_test", "display_name": "No Tests", "model_unique_ids": ["model.dbtlearn.src_reviews", "model.dbtlearn.src_listings", "model.dbtlearn.mart_fullmoon_reviews", "source.dbtlearn.airbnb.reviews", "source.dbtlearn.airbnb.hosts", "model.dbtlearn.src_hosts_copy", "model.dbtlearn.src_hosts"]}], "model_runs": [{"name": "success", "display_name": "Successful Runs", "model_unique_ids": ["model.dbtlearn.mart_fullmoon_reviews", "model.dbtlearn.dim_listings_w_hosts", "model.dbtlearn.dim_listings_cleansed", "model.dbtlearn.dim_hosts_cleansed", "model.dbtlearn.fct_reviews"]}]}, "lineage": {"nodes": [{"id": "model.dbtlearn.dim_listings_w_hosts", "type": "model", "sub_type": "table"}, {"id": "model.dbtlearn.dim_listings_cleansed", "type": "model", "sub_type": "view"}, {"id": "model.dbtlearn.dim_hosts_cleansed", "type": "model", "sub_type": "view"}, {"id": "model.dbtlearn.fct_reviews", "type": "model", "sub_type": "table"}, {"id": "model.dbtlearn.mart_fullmoon_reviews", "type": "model", "sub_type": "table"}, {"id": "model.dbtlearn.src_reviews", "type": "model", "sub_type": null}, {"id": "model.dbtlearn.src_hosts_copy", "type": "model", "sub_type": null}, {"id": "model.dbtlearn.src_listings", "type": "model", "sub_type": null}, {"id": "model.dbtlearn.src_hosts", "type": "model", "sub_type": null}, {"id": "source.dbtlearn.airbnb.listings", "type": "source", "sub_type": null}, {"id": "source.dbtlearn.airbnb.hosts", "type": "source", "sub_type": null}, {"id": "source.dbtlearn.airbnb.reviews", "type": "source", "sub_type": null}, {"id": "exposure.dbtlearn.Executive Dashboard", "type": "exposure", "sub_type": null}], "edges": [["model.dbtlearn.dim_listings_w_hosts", "model.dbtlearn.dim_hosts_cleansed"], ["model.dbtlearn.dim_listings_w_hosts", "model.dbtlearn.dim_listings_cleansed"], ["model.dbtlearn.dim_hosts_cleansed", "model.dbtlearn.src_hosts"], ["model.dbtlearn.dim_listings_cleansed", "model.dbtlearn.src_listings"], ["model.dbtlearn.src_listings", "source.dbtlearn.airbnb.listings"], ["model.dbtlearn.src_hosts", "source.dbtlearn.airbnb.hosts"], ["model.dbtlearn.fct_reviews", "model.dbtlearn.src_reviews"], ["model.dbtlearn.src_reviews", "source.dbtlearn.airbnb.reviews"], ["model.dbtlearn.mart_fullmoon_reviews", "model.dbtlearn.fct_reviews"], ["model.dbtlearn.src_hosts_copy", "source.dbtlearn.airbnb.hosts"], ["exposure.dbtlearn.Executive Dashboard", "model.dbtlearn.dim_listings_w_hosts"], ["exposure.dbtlearn.Executive Dashboard", "model.dbtlearn.mart_fullmoon_reviews"]]}, "invocations": [{"invocation_id": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "detected_at": null, "command": "run", "selected": "", "full_refresh": false, "job_url": null, "job_name": null, "job_id": null, "orchestrator": null}], "resources_latest_invocation": {"model.elementary.alerts_dbt_source_freshness": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.dbtlearn.dim_hosts_cleansed": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.dbt_artifacts_hashes": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.schema_columns_snapshot": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.dbt_run_results": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.elementary_test_results": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.monitors_runs": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.dbtlearn.dim_listings_w_hosts": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.dbt_columns": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.snapshot_run_results": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.metrics_anomaly_score": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.dbt_models": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.anomaly_threshold_sensitivity": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.dbt_snapshots": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.dbtlearn.dim_listings_cleansed": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.information_schema_columns": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.dbt_exposures": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.model_run_results": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.metadata": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.dbt_sources": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.dbtlearn.fct_reviews": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.test_result_rows": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.alerts_anomaly_detection": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.alerts_dbt_tests": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.dbt_metrics": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.dbt_tests": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.alerts_schema_changes": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.dbt_invocations": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.dbtlearn.mart_fullmoon_reviews": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.alerts_dbt_models": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.data_monitoring_metrics": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.dbt_seeds": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.enriched_columns": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.dbt_source_freshness_results": "38bbaf44-0480-4c30-90c7-09c1403a60bd", "model.elementary.job_run_results": "38bbaf44-0480-4c30-90c7-09c1403a60bd"}, "invocations_job_identification": {}, "env": {"project_name": "dbtlearn", "env": "dev", "warehouse_type": "snowflake"}, "tracking": {"posthog_api_key": "phc_56XBEzZmh02mGkadqLiYW51eECyYKWPyecVwkGdGUfg", "report_generator_anonymous_user_id": "9f4ea325-d928-4df9-bce5-114c62e994cb", "anonymous_warehouse_id": "b8aea04b4055e18a700dcc2dcc67752b9e78a08bc28be1429971b1072897bfaf"}}